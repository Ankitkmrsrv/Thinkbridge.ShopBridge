//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Thinkbridge.ShopBridge.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<inventory> inventories { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
    
        public virtual int uspGetAddress(string name, Nullable<decimal> price, string productImage, Nullable<int> quantity, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetAddress", nameParameter, priceParameter, productImageParameter, quantityParameter, descriptionParameter);
        }
    
        public virtual int uspCreateInventory(string name, Nullable<decimal> price, string productImage, Nullable<int> quantity, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateInventory", nameParameter, priceParameter, productImageParameter, quantityParameter, descriptionParameter);
        }
    
        public virtual int usp_CreateInventory(string name, Nullable<decimal> price, string productImage, Nullable<int> quantity, string description)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_CreateInventory", nameParameter, priceParameter, productImageParameter, quantityParameter, descriptionParameter);
        }
    
        public virtual int usp_DeleteInventory(Nullable<System.Guid> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteInventory", productIdParameter);
        }
    
        public virtual ObjectResult<usp_RetieveInventory_Result> usp_RetieveInventory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RetieveInventory_Result>("usp_RetieveInventory");
        }
    
        public virtual ObjectResult<usp_UpdateInventory_Result> usp_UpdateInventory(Nullable<System.Guid> inventory, string name, Nullable<decimal> price, string productImage, Nullable<int> quantity, string description)
        {
            var inventoryParameter = inventory.HasValue ?
                new ObjectParameter("Inventory", inventory) :
                new ObjectParameter("Inventory", typeof(System.Guid));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var productImageParameter = productImage != null ?
                new ObjectParameter("ProductImage", productImage) :
                new ObjectParameter("ProductImage", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UpdateInventory_Result>("usp_UpdateInventory", inventoryParameter, nameParameter, priceParameter, productImageParameter, quantityParameter, descriptionParameter);
        }
    }
}
